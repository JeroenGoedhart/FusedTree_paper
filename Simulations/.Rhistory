W0*tcrossprod(gHat, U)[1,])[,1]
# now obtain the IRWLS update efficiently
bHat    <- qr.solve(XTXpD, XWZpT,
tol=.Machine$double.eps)
penalty <- sum(crossprod(Dg, bHat) *
(bHat))/2
lp      <- as.numeric(tcrossprod(X, t(bHat)) +
as.numeric(tcrossprod(gHat, U)))
}
# compute new likelihood
loglik    <- .loglikSurv(Y, lp) - penalty
print(loglik)
# step-halving for stability
if (loglik < loglikPrev){
lp <- 0.5*lp + 0.5*lpPrev
}
# assess convergence
if(is.nan(loglik) | is.infinite(loglik) | is.na(loglik)){stop("convergence error, please increase penalty")}
if (abs((loglik - loglikPrev)/loglikPrev) < minSuccDiff){
print(paste("IRLS converged at iteration ",iter))
break
} else {
loglikPrev <- loglik
lpPrev <- lp
}
if(iter==maxIter){
print("Not converged yet, please increase maxIter")}
}
if (ncol(X) >= nrow(X)){
bHat <- as.numeric(tcrossprod(as.numeric(slh), Dg))
}
}
return(c(as.numeric(gHat), as.numeric(bHat)))
}
Fit = ridgeGLM2(Y = Y1, U = U1, X = X2,
lambda = optPenalties[1], lambdaG = optPenalties[2], Dg = Delta,
model="surv")
names(Fit)<-c(colnames(U1),colnames(X2))
#ids1 = which(colnames(Xte) %in% names(Fit))
#Xte <- Xte[,ids1]
#ids = which(names(Fit) %in% c(colnames(Ute_tree), colnames(Xte)))
#Ests = Fit[ids]
#Ests = Fit
#exp(Ests)[1:5]/(1+exp(Ests)[1:5])
LP = -as.numeric(cbind(Ute_tree,Xte) %*% Fit)
#exp(LP)[1:5]/(1+exp(LP)[1:5])
Concordances[j] <- concordance(Ytest ~ LP)$concordance
Concordances1[j] <- Est.Cval(cbind(Ytest[,1],Ytest[,2],-LP), tau=max(Ytest[,1]), nofit=T)$Dhat
remove(Fit,ids)
j=3
EmpNodes = names(pvals)[1:j]
#names(Fits)[i] <- paste(names(pvals)[1:i],collapse = ",")
print(paste("Fit FusedTree without omics effects in", paste(names(pvals)[1:j],collapse = ", ")))
ids = lapply(EmpNodes, function (x) grepl(x,colnames(X1)))
ids1 = which(Reduce("|",ids))
X2 <- X1[,-ids1]
Xte <- Xte_tree[,-ids1]
remove(ids,ids1)
NodNum <- ncol(X2)/p
dim(X2)
gc()
if (NodNum == 0){
Fit <- glm(Y1 ~ 0 + ., data = data.frame(U1),family = "binomial")$coefficients
ids = which(names(Fit) %in% colnames(Ute_tree))
Ests = Fit[ids]
LP <- as.numeric(Ute_tree %*% Ests)
Preds <- exp(LP)/(1+exp(LP))
AUCs[j] <- roc(Yte_tree,Preds)$auc
MSEs[j] <- mean((Preds-Yte_tree)^2)
remove(Fit,ids)
}
dim(X2)
Lam <- optPenaltyGLM.kCVauto2(Y = Y1, X = X2, U = U1,
lambdaInit = Lam1, lambdaGinit = 0, Dg = matrix(0, ncol=ncol(X2), nrow = ncol(X2)),
folds = foldsHyp,
model = "surv", loss="loglik")
Fit <-ridgeGLM2(Y = Y1, U = U1, X = X2,
lambda = Lam, lambdaG = 0, Dg = matrix(0, ncol=ncol(X2), nrow = ncol(X2)),
model="surv")
names(Fit)<-c(colnames(U1),colnames(X2))
#ids1 = which(colnames(Xte) %in% names(Fit))
#Xte <- Xte[,ids1]
#ids = which(names(Fit) %in% c(colnames(Ute_tree), colnames(Xte)))
#Ests = Fit[ids]
#Ests = Fit
#remove(ids1,ids,Lam)
LP = -as.numeric(cbind(Ute_tree,Xte) %*% Fit)
names(Fit)<-c(colnames(U1),colnames(X2))
#ids1 = which(colnames(Xte) %in% names(Fit))
#Xte <- Xte[,ids1]
#ids = which(names(Fit) %in% c(colnames(Ute_tree), colnames(Xte)))
#Ests = Fit[ids]
#Ests = Fit
#remove(ids1,ids,Lam)
LP = -as.numeric(cbind(Ute_tree,Xte) %*% Fit)
#Preds <- exp(LP)/(1+exp(LP))
Concordances[j] <- concordance(Yte_tree ~ LP)$concordance
#Preds <- exp(LP)/(1+exp(LP))
Concordances[j] <- concordance(Ytest ~ LP)$concordance
Concordances1[j] <- Est.Cval(cbind(Ytest[,1],Ytest[,2],-LP), tau=max(Ytest[,1]), nofit=T)$Dhat
setwd("C:/Users/VNOB-0732/Desktop/R files/ClinOmics/Simulations")
source('SideFunctions_Update.R')
source('RidgeFunctions_Update.R')
library(rpart);
library(rpart.plot)
library(Matrix)
library(VGAM)
library(treeClust)
library(ModTools)
library(reshape2); library(ggplot2); library(viridis)
p = 10
N = 500
p_Clin = 5
set.seed(232)
Z = matrix(runif(N*p_Clin,0,1),nrow = N, ncol = p_Clin)
colnames(Z) = paste0("z",seq(1,p_Clin))
Z <- data.frame(Z)
set.seed(232)
X = mvtnorm::rmvnorm(N, sigma = diag(p))
colnames(X) = paste0("x",seq(1,p))
###################### Experiment 1 (EFFECT MODIFICATION) ######################
set.seed(444444)
betas <- matrix(rnorm(p,0,5/p),ncol = 1)
betas
Varids = c(2,6)
betas[Varids]
betas
g <- function (z,x,betas){
1*(z[,1] < 0.5)*(z[,2] < 0.5)*(-10 + x[,1:p/5] %*% betas[1:p/5]*6) +
1*(z[,1] < 0.5)*(z[,2] >= 0.5)*(-5 + x[,1:p/5]%*% betas[1:p/5]*3) +
1*(z[,1] >= 0.5)*(z[,4] < 0.5)*(5 + x[,1:p/5]%*% betas[1:p/5]*0.5) +
1*(z[,1] >= 0.5)*(z[,4] >= 0.5)*(10 + x[,1:p/5]%*% betas[1:p/5]*0.2) +
x[,(p/5+1):p]%*% betas[(p/5+1):p]
}
set.seed(23)
Y = g(z=Z,x=X,betas = betas)+rnorm(N,0,1)
Y <- Y[,1]
Var(Y)
# fitting tree
dat=cbind.data.frame(Y1,Z)
rp <- rpart(Y1~.,data = dat, control = rpart.control(xval =5, minbucket = 20),
model = T)
# fitting tree
dat=cbind.data.frame(Y,Z)
rp <- rpart(Y1~.,data = dat, control = rpart.control(xval =5, minbucket = 20),
model = T)
rp <- rpart(Y~.,data = dat, control = rpart.control(xval =5, minbucket = 20),
model = T)
cp = rp$cptable[,1][which.min(rp$cptable[,4])]
Treefit <- prune(rp, cp =cp)
rpart.plot(Treefit, type = 0, extra = 1,nn=F)
Dat = Dat_Tree(tree = Treefit, X = X, Z = Z, Y = Y, model = "linear",LinVars = F)
X1 <- Dat$Omics; U1 <- Dat$Clinical; Y1 = Dat$Response
Dg = .PenMatr(NumNodes = NumNod, p = p)
NumNod = length(unique(Treefit$where))
Dat = Dat_Tree(tree = Treefit, X = X, Z = Z, Y = Y, model = "linear",LinVars = F)
X1 <- Dat$Omics; U1 <- Dat$Clinical; Y1 = Dat$Response
Dg = .PenMatr(NumNodes = NumNod, p = p)
beg = NumNod*(Varids)+1; end = NumNod*(Varids)+1+3
ids1= c(seq(beg[1],end[1]),seq(beg[2],end[2]))
alpha = seq(0.001,5000,0.5)
lambda = c(0,1,10,100,500,1000)
results <- c()
for (i in 1:length(lambda)) {
Lam <- lambda[i]
Betas = lapply(alpha, function (x) ridgeGLM2(Y = Y1, U = U1, X = as.matrix(X1),
lambda = Lam, lambdaG = x, Dg = as.matrix(Dg),
model="linear"))
Betas = do.call(rbind,Betas)
colnames(Betas)= c(colnames(U1),colnames(X1))
Betas <- Betas[,c(3,ids1)]
substring(colnames(Betas),1,1)[-1] <-"\u03b2"
colnames(Betas)[1]<- "c6"
Res = cbind.data.frame("Alpha"=log(alpha),Betas)
melt = melt(Res, id = "Alpha")
melt <- cbind.data.frame(melt,"Lambda" = rep(paste("Lambda = ",Lam),nrow(melt)))
results <- rbind.data.frame(results,melt)
}
unique(results$Lambda)
results$Lambda_f = factor(results$Lambda, levels=c("Lambda =  0","Lambda =  1","Lambda =  10",
"Lambda =  100","Lambda =  500","Lambda =  1000"))
plot <- ggplot(results, aes(x = Alpha, y = value, group = variable, colour = variable)) +
geom_line() + theme_light() +
scale_fill_viridis(discrete = T, option = "D", begin = 0.1) +
theme(legend.title = element_blank()) + labs(x="log(\u03b1)",y="Betas")
plot + facet_wrap(. ~ Lambda_f, nrow=3)
plot <- ggplot(results, aes(x = Alpha, y = value, group = variable, colour = variable)) +
geom_line() + theme_light() +
scale_fill_viridis(discrete = T, option = "D", begin = 0.1) +
theme(legend.title = element_blank()) + labs(x="log(\u03b1)",y="Betas")
plot <- ggplot(results, aes(x = Alpha, y = value, group = variable, colour = variable)) +
geom_line() + theme_light() +
scale_fill_viridis(discrete = T, option = "G", begin = 0.1) +
theme(legend.title = element_blank()) + labs(x="log(\u03b1)",y="Betas")
plot + facet_wrap(. ~ Lambda_f, nrow=3)
View(results)
plot <- ggplot(results, aes(x = Alpha, y = value, group = variable, colour = variable)) +
geom_line() + theme_light() +
scale_fill_viridis(discrete = T, option = "H", begin = 0.1) +
theme(legend.title = element_blank()) + labs(x="log(\u03b1)",y="Betas")
plot + facet_wrap(. ~ Lambda_f, nrow=3)
library(reshape2); library(ggplot2); library(viridis)
unique(results$Lambda)
results$Lambda_f <- gsub("Lambda","\u03bb",results$Lambda_f)
View(results)
plot <- ggplot(results, aes(x = Alpha, y = value, group = variable, colour = variable)) +
geom_line() + theme_light() +
scale_fill_viridis(discrete = T, option = "H", begin = 0.1) +
theme(legend.title = element_blank()) + labs(x="log(\u03b1)",y="Betas")
plot + facet_wrap(. ~ Lambda_f, nrow=3)
results$Lambda_f = factor(results$Lambda, levels=c("Lambda =  0","Lambda =  1","Lambda =  10",
"Lambda =  100","Lambda =  500","Lambda =  1000"),ordered = T)
results$Lambda_f <- gsub("Lambda","\u03bb",results$Lambda_f)
plot <- ggplot(results, aes(x = Alpha, y = value, group = variable, colour = variable)) +
geom_line() + theme_light() +
scale_fill_viridis(discrete = T, option = "H", begin = 0.1) +
theme(legend.title = element_blank()) + labs(x="log(\u03b1)",y="Betas")
plot + facet_wrap(. ~ Lambda_f, nrow=3)
View(results)
lambda = c(0,1,10,100,500,5000)
results <- c()
for (i in 1:length(lambda)) {
Lam <- lambda[i]
Betas = lapply(alpha, function (x) ridgeGLM2(Y = Y1, U = U1, X = as.matrix(X1),
lambda = Lam, lambdaG = x, Dg = as.matrix(Dg),
model="linear"))
Betas = do.call(rbind,Betas)
colnames(Betas)= c(colnames(U1),colnames(X1))
Betas <- Betas[,c(3,ids1)]
substring(colnames(Betas),1,1)[-1] <-"\u03b2"
colnames(Betas)[1]<- "c6"
Res = cbind.data.frame("Alpha"=log(alpha),Betas)
melt = melt(Res, id = "Alpha")
melt <- cbind.data.frame(melt,"Lambda" = rep(paste("Lambda = ",Lam),nrow(melt)))
results <- rbind.data.frame(results,melt)
}
results$Lambda_f = factor(results$Lambda, levels=c("Lambda =  0","Lambda =  1","Lambda =  10",
"Lambda =  100","Lambda =  500","Lambda =  5000"),ordered = T)
results$Lambda_f <- gsub("Lambda","\u03bb",results$Lambda_f)
plot <- ggplot(results, aes(x = Alpha, y = value, group = variable, colour = variable)) +
geom_line() + theme_light() + scale_linetype_manual()
plot <- ggplot(results, aes(x = Alpha, y = value, group = variable, colour = variable)) +
geom_line() + theme_light() + scale_linetype_manual() +
scale_fill_viridis(discrete = T, option = "H", begin = 0.1) +
theme(legend.title = element_blank()) + labs(x="log(\u03b1)",y="Betas")
plot + facet_wrap(. ~ Lambda_f, nrow=3)
plot <- ggplot(results, aes(x = Alpha, y = value, group = variable, colour = variable)) +
geom_line() + theme_light() + scale_linetype_manual() +
scale_color_viridis(discrete = T, option = "H", begin = 0.1) +
theme(legend.title = element_blank()) + labs(x="log(\u03b1)",y="Betas")
plot + facet_wrap(. ~ Lambda_f, nrow=3)
plot <- ggplot(results, aes(x = Alpha, y = value, group = variable, colour = variable)) +
geom_line() + theme_light() + scale_linetype_manual() +
scale_color_viridis(discrete = T, option = "D") +
theme(legend.title = element_blank()) + labs(x="log(\u03b1)",y="Betas")
plot + facet_wrap(. ~ Lambda_f, nrow=3)
plot <- ggplot(results, aes(x = Alpha, y = value, group = variable, colour = variable,linetype = variable)) +
geom_line() + theme_light() + scale_linetype_manual() +
scale_color_viridis(discrete = T, option = "D") +
theme(legend.title = element_blank()) + labs(x="log(\u03b1)",y="Betas")
plot + facet_wrap(. ~ Lambda_f, nrow=3)
plot <- ggplot(results, aes(x = Alpha, y = value, group = variable, colour = variable,linetype = variable)) +
geom_line() + theme_light() +
scale_color_viridis(discrete = T, option = "D") +
theme(legend.title = element_blank()) + labs(x="log(\u03b1)",y="Betas")
plot + facet_wrap(. ~ Lambda_f, nrow=3)
plot <- ggplot(results, aes(x = Alpha, y = value, group = variable, colour = variable,linetype = variable)) +
geom_line() + theme_light() +
scale_color_viridis(discrete = T, option = "D") + scale_linetype_manual(values = c("dashed",rep("solid",4)),rep("dotted",4))
theme(legend.title = element_blank()) + labs(x="log(\u03b1)",y="Betas")
plot <- ggplot(results, aes(x = Alpha, y = value, group = variable, colour = variable,linetype = variable)) +
geom_line() + theme_light() +
scale_color_viridis(discrete = T, option = "D") + scale_linetype_manual(values = c("dashed",rep("solid",4)),rep("dotted",4)) +
theme(legend.title = element_blank()) + labs(x="log(\u03b1)",y="Betas")
plot + facet_wrap(. ~ Lambda_f, nrow=3)
plot <- ggplot(results, aes(x = Alpha, y = value, group = variable, colour = variable,linetype = variable)) +
geom_line() + theme_light() +
scale_color_viridis(discrete = T, option = "D") + scale_linetype_manual(values = c("dashed",rep("solid",4),rep("dotted",4))) +
theme(legend.title = element_blank()) + labs(x="log(\u03b1)",y="Betas")
plot + facet_wrap(. ~ Lambda_f, nrow=3)
dev.off()
dev.off()
CairoPDF(name, width=7,height=7.5)
plot <- ggplot(results, aes(x = Alpha, y = value, group = variable, colour = variable,linetype = variable)) +
geom_line() + theme_light() +
scale_color_viridis(discrete = T, option = "D") + scale_linetype_manual(values = c("dashed",rep("solid",4),rep("dotted",4))) +
theme(legend.title = element_blank()) + labs(x="log(\u03b1)",y="Effect estimates")
plot + facet_wrap(. ~ Lambda_f, nrow=3)
dev.off()
dev.off()
library(Cairo)
install.packages("Cairo")
library(Cairo)
CairoPDF(name, width=7,height=7.5)
plot <- ggplot(results, aes(x = Alpha, y = value, group = variable, colour = variable,linetype = variable)) +
geom_line() + theme_light() +
scale_color_viridis(discrete = T, option = "D") + scale_linetype_manual(values = c("dashed",rep("solid",4),rep("dotted",4))) +
theme(legend.title = element_blank()) + labs(x="log(\u03b1)",y="Effect estimates")
plot + facet_wrap(. ~ Lambda_f, nrow=3)
dev.off()
getwd()
name <- paste("RegPath","EffMod", sep = "_")
library(Cairo)
CairoPDF(name, width=7,height=7.5)
plot <- ggplot(results, aes(x = Alpha, y = value, group = variable, colour = variable,linetype = variable)) +
geom_line() + theme_light() +
scale_color_viridis(discrete = T, option = "D") + scale_linetype_manual(values = c("dashed",rep("solid",4),rep("dotted",4))) +
theme(legend.title = element_blank()) + labs(x="log(\u03b1)",y="Effect estimates")
plot + facet_wrap(. ~ Lambda_f, nrow=3)
dev.off()
#2. diff PMSE versus alpha
load("100_500_EffModd1.Rdata")
x= log(results$alpha)
y=results$MSE_ZeroFus/results$MSE_FusReg
dat=cbind.data.frame("alpha" = x, "PMSE" = y,"Setting" = rep("N = 100",500))
load("300_500_EffModd1.Rdata")
x= log(results$alpha)
y=results$MSE_ZeroFus/results$MSE_FusReg
dat1=cbind.data.frame("alpha" = x, "PMSE" = y,"Setting" = rep("N = 300",500))
dat <- rbind.data.frame(dat,dat1)
bp <- ggplot(dat, aes(x=alpha, y=PMSE)) +
geom_point() + #coord_cartesian(ylim =  c(0.75, 1.07)) +
#scale_y_continuous(breaks=seq(0.8,2.1,0.2)) +
theme_light() +
coord_cartesian(xlim =  c(-10, 15)) +
scale_x_continuous(breaks=seq(-100,50,25)) +
theme(legend.title = element_blank()) +labs(x="log(\u03b1)",y="PMSE Ratio")
bp + facet_grid(. ~ Setting)
bp <- ggplot(dat, aes(x=alpha, y=PMSE)) +
geom_point() + #coord_cartesian(ylim =  c(0.75, 1.07)) +
#scale_y_continuous(breaks=seq(0.8,2.1,0.2)) +
theme_light() +
coord_cartesian(xlim =  c(-10, 15)) +
scale_x_continuous(breaks=seq(-10,15,5)) +
theme(legend.title = element_blank()) +labs(x="log(\u03b1)",y="PMSE Ratio")
bp + facet_grid(. ~ Setting)
name <- paste("Perf_VS_alpha","EffMod.pdf", sep = "_")
CairoPDF(name, width=7,height=3)
pdf(name, width=7,height=3)
bp <- ggplot(dat, aes(x=alpha, y=PMSE)) +
geom_point() + #coord_cartesian(ylim =  c(0.75, 1.07)) +
#scale_y_continuous(breaks=seq(0.8,2.1,0.2)) +
theme_light() +
coord_cartesian(xlim =  c(-10, 15)) +
scale_x_continuous(breaks=seq(-10,15,5)) +
theme(legend.title = element_blank()) +labs(x="log(\u03b1)",y="PMSE Ratio")
bp + facet_grid(. ~ Setting)
dev.off()
dev.off()
name <- paste("Perf_VS_alpha","EffMod.pdf", sep = "_")
CairoPDF(name, width=7,height=3)
bp <- ggplot(dat, aes(x=alpha, y=PMSE)) +
geom_point() + #coord_cartesian(ylim =  c(0.75, 1.07)) +
#scale_y_continuous(breaks=seq(0.8,2.1,0.2)) +
theme_light() +
coord_cartesian(xlim =  c(-10, 15)) +
scale_x_continuous(breaks=seq(-10,15,5)) +
theme(legend.title = element_blank()) +labs(x="log(\u03b1)",y="PMSE Ratio")
bp + facet_grid(. ~ Setting)
dev.off()
#2. diff PMSE versus alpha
load("100_500_FriedmanLinear1.Rdata")
x= log(results$alpha)
y=results$MSE_FullFus/results$MSE_FusReg
dat=cbind.data.frame("alpha" = x, "PMSE" = y,"Setting" = rep("N = 100",500))
load("300_500_FriedmanLinear1.Rdata")
x= log(results$alpha)
y=results$MSE_FullFus/results$MSE_FusReg
dat1=cbind.data.frame("alpha" = x, "PMSE" = y,"Setting" = rep("N = 300",500))
dat <- rbind.data.frame(dat,dat1)
bp <- ggplot(dat, aes(x=alpha, y=PMSE)) +
geom_point() + #coord_cartesian(ylim =  c(0.75, 1.07)) +
#scale_y_continuous(breaks=seq(0.8,2.1,0.2)) +
theme_light() +
coord_cartesian(xlim =  c(-5, 15)) +
theme(legend.title = element_blank()) + labs(x="log(\u03b1)",y="PMSE Ratio")
bp + facet_grid(. ~ Setting)
dev.off()
bp <- ggplot(dat, aes(x=alpha, y=PMSE)) +
geom_point() + #coord_cartesian(ylim =  c(0.75, 1.07)) +
#scale_y_continuous(breaks=seq(0.8,2.1,0.2)) +
theme_light() +
coord_cartesian(xlim =  c(-5, 15)) +
theme(legend.title = element_blank()) + labs(x="log(\u03b1)",y="PMSE Ratio")
bp + facet_grid(. ~ Setting)
bp <- ggplot(dat, aes(x=alpha, y=PMSE)) +
geom_point() + #coord_cartesian(ylim =  c(0.75, 1.07)) +
#scale_y_continuous(breaks=seq(0.8,2.1,0.2)) +
theme_light() +
coord_cartesian(xlim =  c(-5, 20)) +
theme(legend.title = element_blank()) + labs(x="log(\u03b1)",y="PMSE Ratio")
bp + facet_grid(. ~ Setting)
bp <- ggplot(dat, aes(x=alpha, y=PMSE)) +
geom_point() + #coord_cartesian(ylim =  c(0.75, 1.07)) +
#scale_y_continuous(breaks=seq(0.8,2.1,0.2)) +
theme_light() +
coord_cartesian(xlim =  c(-5, 25)) +
theme(legend.title = element_blank()) + labs(x="log(\u03b1)",y="PMSE Ratio")
bp + facet_grid(. ~ Setting)
bp <- ggplot(dat, aes(x=alpha, y=PMSE)) +
geom_point() + #coord_cartesian(ylim =  c(0.75, 1.07)) +
#scale_y_continuous(breaks=seq(0.8,2.1,0.2)) +
theme_light() +
coord_cartesian(xlim =  c(-5, 100)) +
theme(legend.title = element_blank()) + labs(x="log(\u03b1)",y="PMSE Ratio")
bp + facet_grid(. ~ Setting)
bp <- ggplot(dat, aes(x=alpha, y=PMSE)) +
geom_point() + #coord_cartesian(ylim =  c(0.75, 1.07)) +
#scale_y_continuous(breaks=seq(0.8,2.1,0.2)) +
theme_light() +
#coord_cartesian(xlim =  c(-5, 100)) +
theme(legend.title = element_blank()) + labs(x="log(\u03b1)",y="PMSE Ratio")
bp + facet_grid(. ~ Setting)
max(dat$alpha)
max(dat$alpha)
log(1)
#2. diff PMSE versus alpha
load("100_500_FriedmanLinear1.Rdata")
results$alpha==0
length(results$alpha==0)
x= log(results$alpha)
y=results$MSE_FullFus/results$MSE_FusReg
dat=cbind.data.frame("alpha" = x, "PMSE" = y,"Setting" = rep("N = 100",500))
max(dat$alpha) #one infinity value
is.infinite(dat$alpha)
which(is.infinite(dat$alpha))
log(1)
log(0)
#2. diff PMSE versus alpha
load("100_500_FriedmanLinear1.Rdata")
max(results$alpha)
which(is.infinite(results$alpha))
View(results[which(is.infinite(results$alpha)),])
results$alpha[is.infinite(results$alpha)]<-10e20
x= log(results$alpha)
y=results$MSE_FullFus/results$MSE_FusReg
dat=cbind.data.frame("alpha" = x, "PMSE" = y,"Setting" = rep("N = 100",500))
max(dat$alpha) #one infinity value
load("300_500_FriedmanLinear1.Rdata")
max(results$alpha) #
x= log(results$alpha)
y=results$MSE_FullFus/results$MSE_FusReg
dat1=cbind.data.frame("alpha" = x, "PMSE" = y,"Setting" = rep("N = 300",500))
dat <- rbind.data.frame(dat,dat1)
name <- paste("Perf_VS_alpha","FriedLin.pdf", sep = "_")
bp <- ggplot(dat, aes(x=alpha, y=PMSE)) +
geom_point() + #coord_cartesian(ylim =  c(0.75, 1.07)) +
#scale_y_continuous(breaks=seq(0.8,2.1,0.2)) +
theme_light() +
#coord_cartesian(xlim =  c(-5, 100)) +
theme(legend.title = element_blank()) + labs(x="log(\u03b1)",y="PMSE Ratio")
bp + facet_grid(. ~ Setting)
bp <- ggplot(dat, aes(x=alpha, y=PMSE)) +
geom_point() + #coord_cartesian(ylim =  c(0.75, 1.07)) +
#scale_y_continuous(breaks=seq(0.8,2.1,0.2)) +
theme_light() +
coord_cartesian(xlim =  c(-5, 15)) +
theme(legend.title = element_blank()) + labs(x="log(\u03b1)",y="PMSE Ratio")
bp + facet_grid(. ~ Setting)
name <- paste("Perf_VS_alpha","FriedLin.pdf", sep = "_")
CairoPDF(name, width=7,height=3)
bp <- ggplot(dat, aes(x=alpha, y=PMSE)) +
geom_point() + #coord_cartesian(ylim =  c(0.75, 1.07)) +
#scale_y_continuous(breaks=seq(0.8,2.1,0.2)) +
theme_light() +
coord_cartesian(xlim =  c(-5, 15)) +
theme(legend.title = element_blank()) + labs(x="log(\u03b1)",y="PMSE Ratio")
bp + facet_grid(. ~ Setting)
dev.off()
dev.off()
#2. diff PMSE versus alpha
load("100_500_Linear.Rdata")
x= log(results$alpha)
max(x)
sum(is.infinite(x))
x[is.infinite(x)]<-10e20
max(x)
y=results$MSE_FullFus/results$MSE_FusReg
dat=cbind.data.frame("alpha" = x, "PMSE" = y,"Setting" = rep("N = 100",500))
load("300_500_Linear.Rdata")
x= log(results$alpha)
max(x)
#2. diff PMSE versus alpha
load("100_500_Linear.Rdata")
x= log(results$alpha)
x[is.infinite(x)]<-log(10e20)
max(x)
y=results$MSE_FullFus/results$MSE_FusReg
dat=cbind.data.frame("alpha" = x, "PMSE" = y,"Setting" = rep("N = 100",500))
load("300_500_Linear.Rdata")
x= log(results$alpha)
max(x)
y=results$MSE_FullFus/results$MSE_FusReg
dat1=cbind.data.frame("alpha" = x, "PMSE" = y,"Setting" = rep("N = 300",500))
dat <- rbind.data.frame(dat,dat1)
bp <- ggplot(dat, aes(x=alpha, y=PMSE)) +
geom_point() + #coord_cartesian(ylim =  c(0.75, 1.07)) +
#scale_y_continuous(breaks=seq(0.8,2.1,0.2)) +
theme_light() +
coord_cartesian(xlim =  c(-20, 15)) +
theme(legend.title = element_blank()) + labs(x="log(\u03b1)",y="PMSE Ratio")
bp + facet_grid(. ~ Setting)
name <- paste("Perf_VS_alpha","Linear.pdf", sep = "_")
CairoPDF(name, width=7,height=3)
bp <- ggplot(dat, aes(x=alpha, y=PMSE)) +
geom_point() + #coord_cartesian(ylim =  c(0.75, 1.07)) +
#scale_y_continuous(breaks=seq(0.8,2.1,0.2)) +
theme_light() +
coord_cartesian(xlim =  c(-20, 15)) +
theme(legend.title = element_blank()) + labs(x="log(\u03b1)",y="PMSE Ratio")
bp + facet_grid(. ~ Setting)
dev.off()
